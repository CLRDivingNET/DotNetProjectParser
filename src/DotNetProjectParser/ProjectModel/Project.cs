using System.Collections.Generic;
using System.IO;
using System.Xml.Linq;

namespace DotNetProjectParser
{
    /// <summary>
    /// A model of the Project object
    /// </summary>
    public class Project
    {
        /// <summary>
        /// Constructs a new instance
        /// </summary>
        /// <param name="file"></param>
        /// <returns></returns>
        public static Project Construct(FileInfo file)
        {
            return ProjectFactory.GetProject(file);
        }

        /// <summary>
        /// Project name
        /// </summary>
        public string Name { get; internal set; }
        /// <summary>
        /// Full path to project
        /// </summary>
        public string FullPath { get; internal set; }
        
        /// <summary>
        /// Project document as XML - if project file was XML
        /// </summary>
        public XDocument ProjectXml { get; internal set; }


        /// <summary>
        /// Path of the project folder
        /// </summary>
        public string DirectoryPath { get; internal set; }
        
        /// <summary>
        /// Name of the assembly generated by project (without extension)
        /// </summary>
        public string AssemblyName { get; internal set; }

        /// <summary>
        /// The output type 
        /// </summary>
        public string OutputType { get; internal set; }
        
        /// <summary>
        /// The target framework
        /// </summary>
        public string TargetFramework { get; internal set; }
        
        /// <summary>
        /// The extension of the generated assembly
        /// </summary>
        public string TargetExtension { get; internal set; }

        /// <summary>
        /// The items included in the project
        /// </summary>
        public ICollection<ProjectItem> Items { get; } = new List<ProjectItem>();

    }


}